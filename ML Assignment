#oluwadurotimi Aboderin
##Packages, Libraries and Seed

```{r}
#library(caret)

library(randomForest)

#library(rpart)

#library(rpart.plot)

library(RColorBrewer)

set.seed(1234)
```

##Getting and cleaning data

####The training data set
```{r}
trainUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
```

####The testing data set
```{r}
testUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
```

####Loading data
```{r}
training <- read.csv(url(trainUrl), na.strings=c("NA","#DIV/0!",""))
testing <- read.csv(url(testUrl), na.strings=c("NA","#DIV/0!",""))
```

##Partitioning the training set into two

####Partitioning Training data set into two, 60% training, 40% testing
```{r}
inTrain <- createDataPartition(y=training$classe, p=0.6, list=FALSE)
myTraining <- training[inTrain, ]; myTesting <- training[-inTrain, ]
dim(myTraining); dim(myTesting)
```

##Cleaning the data

####Transformation 1: Cleaning NearZeroVariance Variables
```{r}
myDataNZV <- nearZeroVar(myTraining, saveMetrics=TRUE)
```

####Another subset of NZV variables
```{r}
myNZVvars <- names(myTraining) %in% c("new_window", "kurtosis_roll_belt", "kurtosis_picth_belt",
                                      "kurtosis_yaw_belt", "skewness_roll_belt", "skewness_roll_belt.1", "skewness_yaw_belt",
                                      "max_yaw_belt", "min_yaw_belt", "amplitude_yaw_belt", "avg_roll_arm", "stddev_roll_arm",
                                      "var_roll_arm", "avg_pitch_arm", "stddev_pitch_arm", "var_pitch_arm", "avg_yaw_arm",
                                      "stddev_yaw_arm", "var_yaw_arm", "kurtosis_roll_arm", "kurtosis_picth_arm",
                                      "kurtosis_yaw_arm", "skewness_roll_arm", "skewness_pitch_arm", "skewness_yaw_arm",
                                      "max_roll_arm", "min_roll_arm", "min_pitch_arm", "amplitude_roll_arm", "amplitude_pitch_arm",
                                      "kurtosis_roll_dumbbell", "kurtosis_picth_dumbbell", "kurtosis_yaw_dumbbell", "skewness_roll_dumbbell",
                                      "skewness_pitch_dumbbell", "skewness_yaw_dumbbell", "max_yaw_dumbbell", "min_yaw_dumbbell",
                                      "amplitude_yaw_dumbbell", "kurtosis_roll_forearm", "kurtosis_picth_forearm", "kurtosis_yaw_forearm",
                                      "skewness_roll_forearm", "skewness_pitch_forearm", "skewness_yaw_forearm", "max_roll_forearm",
                                      "max_yaw_forearm", "min_roll_forearm", "min_yaw_forearm", "amplitude_roll_forearm",
                                      "amplitude_yaw_forearm", "avg_roll_forearm", "stddev_roll_forearm", "var_roll_forearm",
                                      "avg_pitch_forearm", "stddev_pitch_forearm", "var_pitch_forearm", "avg_yaw_forearm",
                                      "stddev_yaw_forearm", "var_yaw_forearm")
myTraining <- myTraining[!myNZVvars]

dim(myTraining)
```

####Transformation 2: Killing first column of Dataset
```{r}
myTraining <- myTraining[c(-1)]
```

####Transformation 3: Cleaning Variables with too many NAs
```{r}
trainingV3 <- myTraining #creating another subset to iterate in loop
for(i in 1:length(myTraining)) { #for every column in the training dataset
  if( sum( is.na( myTraining[, i] ) ) /nrow(myTraining) >= .6 ) { #if n?? NAs > 60% of total observations
    for(j in 1:length(trainingV3)) {
      if( length( grep(names(myTraining[i]), names(trainingV3)[j]) ) ==1)  { #if the columns are the same:
        trainingV3 <- trainingV3[ , -j] #Remove that column
      }   
    } 
  }
}

dim(trainingV3)
```

####Setting back to our set:
```{r}
myTraining <- trainingV3
rm(trainingV3)
```

####The same 3 transformations for the testing data sets
```{r}
clean1 <- colnames(myTraining)
clean2 <- colnames(myTraining[, -58]) #already with classe column removed
myTesting <- myTesting[clean1]
testing <- testing[clean2]
```

##To check the new N?? of observations
```{r}
dim(myTesting)
```

##To check the new N?? of observations
```{r}
dim(testing)
```

####To ensure proper functioning of Decision Trees, need to coerce the data into the same type
```{r}
for (i in 1:length(testing) ) {
  for(j in 1:length(myTraining)) {
    if( length( grep(names(myTraining[i]), names(testing)[j]) ) ==1)  {
      class(testing[j]) <- class(myTraining[i])
    }      
  }      
}

testing <- rbind(myTraining[2, -58] , testing) #note row 2 does not mean anything, this will be removed right.. now:
testing <- testing[-1,]
```
##Using ML algorithms for prediction: Decision Tree
```{r}
modFitA1 <- rpart(classe ~ ., data=myTraining, method="class")

fancyRpartPlot(modFitA1)
```

####Predicting:
```{r}
predictionsA1 <- predict(modFitA1, myTesting, type = "class")
```

####Using confusion Matrix to test results:
```{r}
confusionMatrix(predictionsA1, myTesting$classe)
```

##Using ML algorithms for prediction: Random Forests
```{r}
modFitB1 <- randomForest(classe ~. , data=myTraining)
```

####Predicting in-sample error:
```{r}
predictionsB1 <- predict(modFitB1, myTesting, type = "class")
```

####Using confusion Matrix to test results:
```{r}
confusionMatrix(predictionsB1, myTesting$classe)
```

####Random Forests yielded better Results.

####For Random Forests we use the following formula, which yielded a much better prediction in in-sample:
```{r}
predictionsB2 <- predict(modFitB1, testing, type = "class")
```
